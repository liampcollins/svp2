#= depend_on_asset "programme-profile.html"
#= depend_on_asset "edit-programme-form.html"
#= depend_on_asset "add-venture-form.html"

(function() {

  var app = angular.module('svpApp', ['ngAnimate', 'google-maps']);

/////////////////////////////////////////////
// /////PROGRAMMES INDEX CONTROLLER
  app.controller('progController' , ["$scope", "$http", function($scope, $http) {


    request = function(method, url, data){
      return $.ajax({
        method: method,
        url: url,
        dataType: "json",
        data: data
      })
    }



//////////////////////////////////////////////////////////////////////// SETTING VARIABLES////////////

    // GEOGRAPHY VARIABLES
    $scope.continents = ["Africa", "Asia", "Europe", "North America", "South America", "Oceania"]
    var all_europe_countries = ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan", "Belarus", "Belgium", "Bosnia & Herzegovina", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Georgia", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Kosovo", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "The Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey", "Ukraine", "United Kingdom"]
    var all_asia_countries = ["Afghanistan", "Bahrain", "Bangladesh", "Bhutan", "Brunei", "Cambodia", "China", "East Timor", "India", "Indonesia", "Iran", "Iraq", "Israel", "Japan", "Jordan", "Kazakhstan", "Korea North", "Korea South", "Kuwait", "Kyrgyzstan", "Laos", "Lebanon", "Malaysia", "Maldives", "Mongolia", "Myanmar (Burma)", "Nepal", "Oman", "Pakistan", "The Philippines", "Qatar", "Russia", "Saudi Arabia", "Singapore", "Sri Lanka", "Syria", "Taiwan", "Tajikistan", "Thailand", "Turkey", "Turkmenistan", "United Arab Emirates", "Uzbekistan", "Vietnam", "Yemen"]
    var all_africa_countries = ["Algeria", "Angola", "Benin", "Botswana", "Burkina Faso", "Burundi", "Cameroon", "Cape Verde", "Central African Republic", "Chad", "Comoros", "Congo", "Congo Democratic Republic of", "Cote d'Ivoire", "Djibouti", "Egypt", "Equatorial Guinea", "Eritrea", "Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar", "Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique", "Namibia", "Niger", "Nigeria", "Rwanda", "Sao Tome & Principe", "Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa", "South Sudan", "Sudan", "Swaziland", "Tanzania", "Togo", "Tunisia", "Uganda", "Zambia", "Zimbabwe"]
    var all_northamerica_countries = ["Antigua & Barbuda", "Bahamas", "Barbados", "Belize", "Canada", "Costa Rica", "Cuba", "Dominica", "Dominican Republic", "El Salvador", "Grenada", "Guatemala", "Haiti", "Honduras", "Jamaica", "Mexico", "Nicaragua", "Panama", "St. Kitts & Nevis", "St. Lucia", "St. Vincent & The Grenadines", "Trinidad & Tobago", "United States of America", "United States"]
    var all_southamerica_countries = ["Argentina", "Bolivia", "Brazil", "Chile", "Colombia", "Ecuador", "Guyana", "Paraguay", "Peru", "Suriname", "Uruguay", "Venezuela"]
    var all_oceania_countries = ["Australia", "Fiji", "Kiribati", "Marshall Islands", "Micronesia", "Samoa", "Solomon Islands", "Nauru", "New Zealand", "Palau", "Papua New Guinea", "Tonga", "Tuvalu", "Vanuatu"]
   
   // Creating continent country lists based on what ventures are in the db
    $scope.countrylist = {}
      $scope.continents.forEach(function(continent){
        continent = continent.toLowerCase().replace(/\s/g, '');
        $scope.countrylist[continent + "_countries"] = []
    })
    gon.programmes.forEach(function(programme){
      $scope.continents.forEach(function(continent){
        continent = continent.toLowerCase().replace(/\s/g, '');
        continent_country_list_str = "all_"+continent+"_countries";
        continent_country_list = eval('{' + continent_country_list_str + '}');
        coutries_in_continent_in_db = continent + "_countries";
        if ((continent_country_list.indexOf(programme.country)>-1) && ($scope.countrylist[coutries_in_continent_in_db].indexOf)(programme.country)==-1){
          $scope.countrylist[coutries_in_continent_in_db].push(programme.country);
        }
      })
    })


    // Sourcing programmes from db
    $http.get('/programmes.json').success(function(data) {
      $scope.programmes = data
    });

    if(current_user_programmes != false){
      $scope.current_user_programmes = current_user_programmes      
    };


    // Setting map centrepoints for continents
    $scope.mapcoords = {}
    $scope.mapcoords["europe_coords"]= [51.7392773, 13.7809811];
    $scope.mapcoords["asia_coords"]= [22.2529927, 100.2653561];
    $scope.mapcoords["africa_coords"]= [8.998471, 21.515356];
    $scope.mapcoords["northamerica_coords"]= [40.7676361, -94.500269];
    $scope.mapcoords["southamerica_coords"]= [-14.8669877, -60.5340838];
    $scope.mapcoords["oceania_coords"]= [-29.0818288, 145.0420881];
    $scope.programme_types = ["Accelerator", "Incubator", "Competition", "Bootcamp"];
    $scope.venture_types = ["Ltd. Company", "Community Organisation", "Registered Charity"];

//////////////////////////////////////////////////////////////// 
/////////SETTING DEFAULT STATES////////////////
    $scope.selected_programme = false;
    $scope.showingNavAndList = true;
    $scope.showingFilteredResults = false;
    $scope.showingProfile = false;
    $scope.prog_list_invisible = false;
    $scope.continent_list_invisible = false;
    $scope.country_list_invisible = false;
    $scope.programmeWithNewVenture = {}
    $scope.showingSecondForm=false;
    $scope.showingThirdForm=false;
    $scope.programme_type_clicked = false;
    $scope.continent_clicked = false;
    $scope.showingCountries=true;
    $scope.country_clicked = false;
    $scope.geog_clicked = false;
    $scope.showingSecondForm = false;
    $scope.showingThirdForm = false;
    $scope.showingGoodInc = true;
    $scope.showingStartFac = false;
if ($scope.continent_list_invisible = false){
  $scope.showingCountries=true;
}



    //////////////////////////////////////////////////////////////// 
    ///////////MAP METHODS ////////////////////////

    createMarker = function(programme, idKey){
      if (idKey == null) {
        idKey = "id";
      }
      var latitude = programme.lat;
      var longitude = programme.long;
      var title = programme.name;
      var ret = {
        options: {draggable: false,
          labelClass: 'labelMarker'},
          latitude: latitude,
          longitude: longitude,
          title: title,
          show: false
      };
      ret.onClick = function() {
        ret.show = !ret.show;
      };
      ret[idKey] = programme.id;
      return ret;
    }
    $scope.map = {
      center: {
          latitude: 45,
          longitude: -15
      },
      zoom: 3
    };

    $scope.markers = [];
    gon.programmes.forEach(function(programme){
      $scope.markers.push(createMarker(programme))
    });

    $scope.showInfoWindow = function() {
      infoWindow.open(map, marker);
    };

    $scope.clickMe = function(){
      alert("clicked");
    };

////////////////////////////////////////////////////////////////// 
///////PROGRAMMES FILTER METHODS ////////////////


    $scope.progFilterClicked = function(){
      $scope.prog_list_invisible = !$scope.prog_list_invisible;
    };

    $scope.contFilterClicked = function(){
      $scope.continent_list_invisible = !$scope.continent_list_invisible;
      $scope.showingCountries=false;
    };
    

    $scope.programmeClicked = function(programme_type){

      if($scope.programme_type_clicked == programme_type.toLowerCase().replace(/\s/g, '')){
        //THIS PROGRAMME ALREDY SELECTED
        event.srcElement.className = "ng-binding ng-scope prog_type";
        $scope.programme_type_clicked = false;
      }else{
        //THIS PROGRAMME NOT ALREADY SELECTED

      // Removing active class from all sibling buttons
        progButtons = event.srcElement.parentElement.children;
        numProgButtons = progButtons.length;
        for (var i = 0; i < numProgButtons; i++) {
        progButtons[i].className = "ng-binding ng-scope prog_type";
        };
        // Add active class to newly selected button
        event.srcElement.className = event.srcElement.className + " active";

        $scope.programme_type_clicked = programme_type.toLowerCase().replace(/\s/g, '');
      };
      $scope.showingFilteredResults = true;
    };

    $scope.continentClicked = function(continent){
      continent = continent.toLocaleLowerCase().replace(/\s/g, '');
      if($scope.continent_clicked == continent){
        //THIS CONTINENT ALREADY SELECTED
        event.srcElement.className = "ng-binding ng-scope continent_button";
        $scope.continent_clicked = false;
        $scope.geog_clicked = false;
        $scope.showingCountries=false;
      }else{
        //THIS CONTINENT NOT ALREADY SELECTED
        // Removing active class from all sibling buttons
        continentButtons = event.srcElement.parentElement.children;
        numContinentButtons = continentButtons.length;
        for (var i = 0; i < numContinentButtons; i++) {
        continentButtons[i].className = "ng-binding ng-scope continent_button";
        };
        // Add active class to newly selected button
        event.srcElement.className = event.srcElement.className + " active";

        $scope.continent_clicked = continent;
        $scope.showingCountries=true;
      }
      $scope.country_clicked = false;
      $scope.geog_clicked = $scope.continent_clicked;
      $scope.showingFilteredResults = true;
      $scope.countries = $scope.countrylist[continent + "_countries"];
      map_coords = $scope.mapcoords[continent.toLocaleLowerCase() + "_coords"];
      if(continent == "northamerica" || "europe" || "oceania"){
        zoom_level = 4;
      }else{
        zoom_level = 3;
      };
      lat = map_coords[0];
      lng = map_coords[1];
      $scope.map = {
        center: {
            latitude: lat,
            longitude: lng
        },
        zoom: zoom_level
      };
    };

    $scope.countryClicked = function(country){
      if($scope.country_clicked == country.toLowerCase().replace(/\s/g, '')){
        // Remove active class from deselected button
        event.srcElement.className = "ng-binding ng-scope country_button";
        $scope.country_clicked = false;
        $scope.geog_clicked = false;
        map_coords = [54, -15];
        zoom = 3;
      }else{
        // Removing active class from all sibling buttons
        countryButtons = event.srcElement.parentElement.children;
        numCountryButtons = countryButtons.length;
        for (var i = 0; i < numCountryButtons; i++) {
        countryButtons[i].className = "ng-binding ng-scope country_button";
        }
        // Add active class to newly selected button
        event.srcElement.className = event.srcElement.className + " active";

        $scope.country_clicked = country.toLowerCase().replace(/\s/g, '');
        $scope.programmes.forEach(function(programme){
          if(programme.country.toLowerCase().replace(/\s/g, '') == country.toLowerCase().replace(/\s/g, '')){
            map_coords = [parseInt(programme.lat), parseInt(programme.long)];
          };
        });
        zoom = 5;
      };
      $scope.showingFilteredResults = true;
      $scope.continent_clicked = false;
      $scope.geog_clicked = $scope.country_clicked;
      lat = map_coords[0];
      lng = map_coords[1];
      $scope.map = {
        center: {
          latitude: lat,
          longitude: lng
        },
        zoom: zoom
      };
    };

    // FILTER METHOD WITH 4 SCENARIOS
    $scope.search = function(programme){
      // If both a geography and a programme type have been clicked
      if($scope.geog_clicked != false && $scope.programme_type_clicked != false){
        if (((programme.continent.toLowerCase().replace(/\s/g, '')==$scope.geog_clicked) || (programme.country.toLowerCase().replace(/\s/g, '')==$scope.geog_clicked)) && (programme.prog_type.toLowerCase().replace(/\s/g, '')==$scope.programme_type_clicked)); 
          {
          return true;
        }
        return false;
      //If only a programme type has been clicked
      }else if($scope.geog_clicked == false && $scope.programme_type_clicked != false){
        if (programme.prog_type.toLowerCase().replace(/\s/g, '')==$scope.programme_type_clicked); 
          {
          return true;
        }
        return false;
      //If only a geography has been clicked
      }else if($scope.programme_type_clicked == false && $scope.geog_clicked != false ){
        if ((programme.continent.toLowerCase().replace(/\s/g, '')==$scope.geog_clicked) || (programme.country.toLowerCase().replace(/\s/g, '')==$scope.geog_clicked)); 
          {
          return true;
        }
        return false;
      //If nothing clicked
      }else{
        return true;
      }        
    };

    ////////////////////////////////////////////////
    /////// EDIT PROGRAMME FORM //////////////
    $scope.editProfile = function(programme){
      $scope.editing_programme = programme;
      $scope.showingProfile = false;
      $scope.editingProgramme = true;
    };
    $scope.showSecondForm = function(){
      $scope.showingSecondForm=true;
    };
    $scope.hideSecondForm = function(){
      $scope.showingSecondForm=false;
    };
    $scope.showThirdForm = function(){
      $scope.showingSecondForm=false;
      $scope.showingThirdForm=true;
    };
    $scope.hideThirdForm = function(){
      $scope.showingSecondForm=true;
      $scope.showingThirdForm=false;
    };
    $scope.updateProgramme = function(programme){
    };
    $scope.closeForm = function(){
      $scope.showingProfile = true;
      $scope.editingProgramme = false;
      $scope.showingSecondForm=false;
      $scope.showingThirdForm=false;
      $scope.hidingManageProgs = false;
      $scope.addingVenture = false;
    };
//////////////////////////////////////////////////////////
////// NAVIGATION METHODS ////////////////    

    $scope.showProgramme = function(programme){
      $scope.selected_programme = programme;
      $scope.showingProfile = true;
      $scope.showingNavAndList = false;
      $scope.showingFilteredResults = false;

    }

    $scope.showVenture = function(venture){
      $scope.showingVenture = true;
      $scope.selected_venture = venture;
    }

    $scope.editProgrammeButton = function(programme){
      window.location= "http://localhost:3000/programmes/" + programme.id + "/edit";
    }

    $scope.editProgramme = function(){
      route = "/programmes/";
      id = $scope.selected_programme.id;
      json = ".json";
      request("PUT", route + id + json, {programme:{description: description.value, city: city.value, country: country.value, continent: continent.value, funding_offered: funding_offered.value, website_url: website_url.value, founded: founded.value }
      }).success(function(){
        $scope.selected_programme.description=description.value
        $scope.selected_programme.city= city.value, 
        $scope.selected_programme.country= country.value, 
        $scope.selected_programme.continent= continent.value, 
        $scope.selected_programme.funding_offered= funding_offered.value, 
        $scope.selected_programme.website_url= website_url.value, 
        $scope.selected_programme.founded= founded.value
      })
      $scope.editingProgramme = false;
      $scope.showingProfile = true;
      $scope.hidingManageProgs = false;
    }
    
    $scope.backToProgrammes = function(){
      $scope.showingVenture = false;
      $scope.showingProfile = false;
      $scope.showingNavAndList = true;
      $scope.selected_programme = false;
    }

    $scope.addVentureButton = function(programme){
      $scope.hidingManageProgs = true;
      $scope.showingVentureForm = true;
      $scope.addingVenture = true;
      $scope.showingProfile = false;
      $scope.programmeWithNewVenture = programme;
    };
    $scope.addVenture = function(event){
      venture_fields = ["org_type", "location", "description", "founder", "sector", "founded", "programme"];
      data_fields = {};
      venture_fields.forEach(function(field){
        data_fields[field] = eval('{' + 'newVentureForm.' + field + '.value' + '}');
      });
      data_fields["name"] = newVentureForm.title.value;
      data_fields["programme"] = $scope.programmeWithNewVenture.id;
      request("POST", "/ventures.json", {venture:data_fields}).success(function(){
        $scope.hidingManageProgs = false;
        $scope.showingVentureForm = false;
      });
    };

    $scope.showVentures = function(programme){
      if($scope.showingVentures == true){
        $scope.showingVentures = false;
        event.srcElement.innerHTML = "Show Ventures";
      }else{
        $scope.showingVentures = true;
        event.srcElement.innerHTML = "Hide Ventures";
      };
    };
  }]);

  /////////////////////////////////////////////////
 ///// DIRECTIVES/////////////////////////////////
  app.directive('showingSelectedProgramme', function() {
      return {
        restrict: 'AEC',
        templateUrl: "<%= asset_path('programme-profile.html') %>"
      };
  });

  app.directive('editProgrammeForm', function() {
      return {
        restrict: 'AEC',
        templateUrl: "<%= asset_path('edit-programme-form.html') %>"
      };
  });
  app.directive('addVentureForm', function() {
      return {
        restrict: 'AEC',
        templateUrl: "<%= asset_path('add-venture-form.html') %>"
      };
  });
})();